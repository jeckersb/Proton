#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
import optparse, socket
from brokerlib import Broker
from queue import Queue
from xproton import *

parser = optparse.OptionParser(usage="usage: %prog [options] QUEUE_1 ... QUEUE_n",
                               description="Prototype amqp broker.")
parser.add_option("-i", "--interface", default="0.0.0.0",
                  help="interface to listen on (default %default)")
parser.add_option("-c", "--container", default=socket.gethostname(),
                  help="container-id for the broker (default %default)")
parser.add_option("-n", "--nodes", default=[], action="append",
                  help="load nodes from specified file")
parser.add_option("-u", "--users", default=[], action="append",
                  help="load user definitions from specified file")
parser.add_option("-p", "--port", type=str, default="5672",
                  help="port to listen on (default %default)")
parser.add_option("-a", "--auth", action="store_true",
                  help="enable sasl authentication layer")
parser.add_option("-f", "--frame-size", type=int, default=4294967295,
                  help="specify the maximum frame size")
parser.add_option("-w", "--window", type=int, default=65536,
                  help="session window size")
parser.add_option("-e", "--period", type=float, default=None,
                  help="update period for session window")
parser.add_option("-t", "--trace", default="err",
                  help="enable tracing for specified categories")
parser.add_option("-T", "--threshold", dest="thresholds", default=[],
                  action="append", metavar="NAME=THRESHOLD",
                  help="specify flow control threshold for a queue")
parser.add_option("-g", "--graphics", action="store_true",
                  help="launch the broker with graphics enabled")

opts, args = parser.parse_args()

if opts.graphics:
  from window import Window
else:
  class Window:
    def __init__(self, *args, **kwargs):
      pass
    def add(self, *args, **kwargs):
      raise RuntimeError("graphics are not enabled")
    def redraw(self):
      pass

class Hack:

  done = False

  @staticmethod
  def stop(cls, *args):
    Hack.done = True

try:
  passwords = {}
  for u in opts.users:
    exec open(u) in globals(), passwords

  broker = Broker(opts.container)
  broker.window = opts.window
  broker.period = opts.period
  broker.frame_size = opts.frame_size
  broker.mechanisms = "PLAIN ANONYMOUS"
  broker.passwords = passwords
  broker.traces = opts.trace.split()

  window = Window(Hack.stop)
  nodes = {}
  for n in opts.nodes:
    exec open(n) in globals(), nodes

  for name, value in nodes.items():
    if name.startswith("_"):
      continue
    broker.nodes[name] = value

  thresholds = {}
  for value in opts.thresholds:
    name, threshold = value.split("=", 2)
    thresholds[name] = int(threshold)

  for a in args:
    broker.nodes[a] = Queue(thresholds.get(a))

  driver = pn_driver()
  listener = pn_listener(driver, opts.interface, opts.port, None)
  if listener:
    while not Hack.done:
      pn_driver_wait(driver, -1)

      while True:
        l = pn_driver_listener(driver)
        if not l: break
        c = pn_listener_accept(l)
        pn_connector_set_context(c, broker.tick)

      while True:
        c = pn_driver_connector(driver)
        if not c: break
        pn_connector_process(c)
        handler = pn_connector_context(c)
        handler(c)
        window.redraw()
        if pn_connector_closed(c):
          conn = pn_connector_connection(c)
          if conn: pn_connection_destroy(conn)
          pn_connector_destroy(c)
        else:
          pn_connector_process(c)

except KeyboardInterrupt:
  pass
